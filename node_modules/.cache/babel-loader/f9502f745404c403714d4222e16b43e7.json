{"ast":null,"code":"var _jsxFileName = \"/Users/yungdae/Documents/Actualize/sandbox-react/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { Canvas, useThree, useFrame } from 'react-three-fiber';\nimport { CubeTextureLoader, LinearMipmapLinearFilter, WebGLCubeRenderTarget, RGBFormat, CubeCamera } from 'three';\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Sandbox() {\n  _s();\n\n  var _useThree = useThree(),\n      scene = _useThree.scene;\n\n  var loader = new CubeTextureLoader();\n  var texture = loader.load([\"/1.jpg\", \"/2.jpg\", \"/3.jpg\", \"/4.jpg\", \"/5.jpg\", \"/6.jpg\"]);\n  scene.background = texture;\n  return null;\n}\n\n_s(Sandbox, \"H/W0sI++KbHVw4gYmxbTnW2ERRY=\", false, function () {\n  return [useThree];\n});\n\n_c = Sandbox;\n\nfunction Sphere() {\n  _s2();\n\n  var _useThree2 = useThree(),\n      gl = _useThree2.gl,\n      scene = _useThree2.scene;\n\n  var cubeRenderTarget = new WebGLCubeRenderTarget(256, {\n    format: RGBFormat,\n    generateMipmaps: true,\n    minFilter: LinearMipmapLinearFilter\n  });\n  var cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\n  cubeCamera.position.set(0, 0, 0);\n  scene.add(cubeCamera);\n  useFrame(function () {\n    return cubeCamera.update(gl, scene);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    visible: true,\n    position: [0, 0, 0],\n    rotation: [0, 0, 0],\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      attach: \"geometry\",\n      args: [2, 32, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      attach: \"material\",\n      envMap: cubeCamera.renderTarget.texture,\n      color: \"white\",\n      roughness: 0.1,\n      metalness: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Sphere, \"yWklzBCXNMNnjyqeM+FTlecX47k=\", false, function () {\n  return [useThree, useFrame];\n});\n\n_c2 = Sphere;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: [/*#__PURE__*/_jsxDEV(Sphere, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sandbox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_c3 = App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Sandbox\");\n$RefreshReg$(_c2, \"Sphere\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/yungdae/Documents/Actualize/sandbox-react/src/App.js"],"names":["React","Canvas","useThree","useFrame","CubeTextureLoader","LinearMipmapLinearFilter","WebGLCubeRenderTarget","RGBFormat","CubeCamera","Sandbox","scene","loader","texture","load","background","Sphere","gl","cubeRenderTarget","format","generateMipmaps","minFilter","cubeCamera","position","set","add","update","renderTarget","App"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,QAA2C,mBAA3C;AACA,SAASC,iBAAT,EAA4BC,wBAA5B,EAAsDC,qBAAtD,EAA6EC,SAA7E,EAAwFC,UAAxF,QAA0G,OAA1G;AACA,OAAO,cAAP;;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AAAA,kBACCP,QAAQ,EADT;AAAA,MACTQ,KADS,aACTA,KADS;;AAEjB,MAAMC,MAAM,GAAG,IAAIP,iBAAJ,EAAf;AACA,MAAMQ,OAAO,GAAGD,MAAM,CAACE,IAAP,CAAY,CAC1B,QAD0B,EAE1B,QAF0B,EAG1B,QAH0B,EAI1B,QAJ0B,EAK1B,QAL0B,EAM1B,QAN0B,CAAZ,CAAhB;AAQAH,EAAAA,KAAK,CAACI,UAAN,GAAmBF,OAAnB;AACA,SAAO,IAAP;AACD;;GAbQH,O;UACWP,Q;;;KADXO,O;;AAgBT,SAASM,MAAT,GAAkB;AAAA;;AAAA,mBACMb,QAAQ,EADd;AAAA,MACRc,EADQ,cACRA,EADQ;AAAA,MACJN,KADI,cACJA,KADI;;AAEhB,MAAMO,gBAAgB,GAAG,IAAIX,qBAAJ,CAA0B,GAA1B,EAA+B;AACtDY,IAAAA,MAAM,EAAEX,SAD8C;AAEtDY,IAAAA,eAAe,EAAE,IAFqC;AAGtDC,IAAAA,SAAS,EAAEf;AAH2C,GAA/B,CAAzB;AAKA,MAAMgB,UAAU,GAAG,IAAIb,UAAJ,CAAe,CAAf,EAAkB,IAAlB,EAAwBS,gBAAxB,CAAnB;AACAI,EAAAA,UAAU,CAACC,QAAX,CAAoBC,GAApB,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AACAb,EAAAA,KAAK,CAACc,GAAN,CAAUH,UAAV;AAEAlB,EAAAA,QAAQ,CAAC;AAAA,WAAMkB,UAAU,CAACI,MAAX,CAAkBT,EAAlB,EAAsBN,KAAtB,CAAN;AAAA,GAAD,CAAR;AAEA,sBACE;AAAM,IAAA,OAAO,MAAb;AAAc,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxB;AAAmC,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA7C;AAAA,4BACE;AAAgB,MAAA,MAAM,EAAC,UAAvB;AAAkC,MAAA,IAAI,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR;AAAxC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,MAAM,EAAC,UADT;AAEE,MAAA,MAAM,EAAEW,UAAU,CAACK,YAAX,CAAwBd,OAFlC;AAGE,MAAA,KAAK,EAAC,OAHR;AAIE,MAAA,SAAS,EAAE,GAJb;AAKE,MAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;IAzBQG,M;UACeb,Q,EAUtBC,Q;;;MAXOY,M;AA2BT,eAAe,SAASY,GAAT,GAAe;AAC5B,sBACE,QAAC,MAAD;AAAA,4BAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;MARuBA,G","sourcesContent":["import React from \"react\";\nimport { Canvas, useThree, useFrame } from 'react-three-fiber'\nimport { CubeTextureLoader, LinearMipmapLinearFilter, WebGLCubeRenderTarget, RGBFormat, CubeCamera } from 'three'\nimport \"./styles.css\";\n\nfunction Sandbox() {\n  const { scene } = useThree()\n  const loader = new CubeTextureLoader();\n  const texture = loader.load([\n    \"/1.jpg\",\n    \"/2.jpg\",\n    \"/3.jpg\",\n    \"/4.jpg\",\n    \"/5.jpg\",\n    \"/6.jpg\"\n  ])\n  scene.background = texture;\n  return null\n}\n\n\nfunction Sphere() {\n  const { gl, scene } = useThree();\n  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\n    format: RGBFormat,\n    generateMipmaps: true,\n    minFilter: LinearMipmapLinearFilter\n  })\n  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\n  cubeCamera.position.set(0, 0, 0);\n  scene.add(cubeCamera);\n\n  useFrame(() => cubeCamera.update(gl, scene))\n\n  return (\n    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]}>\n      <sphereGeometry attach=\"geometry\" args={[2, 32, 32]} />\n      <meshBasicMaterial\n        attach=\"material\"\n        envMap={cubeCamera.renderTarget.texture}\n        color=\"white\"\n        roughness={0.1}\n        metalness={1}\n      />\n    </mesh>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas>\n      {/* <CameraControls /> */}\n      <Sphere />\n      <Sandbox />\n    </Canvas>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}